@page "/refresh"
@using Services
@inject HttpClient Http
@inject SamplesClient _SamplesClient
<h1>Refresh/Update Sample Apps</h1>

@if (RootFolder == null)
{
    <p><em>ReLoading application data from Server to Client</em></p>
    @*<Chase />
        <Circle />
        <CircleFade />
        <Flow />
        <Grid />
        <Plane />
        <Pulse />
        <Swing />
        <Wander />*@
    <Wave />
    @*<Bounce />
        <Fold />*@
}
else
{
    <p><b><i>Have loaded the folders under the folder: </i><font color="blue">@RootFolder.FolderName</font></b></p>
    <ul>
        <li>
            <button class="btn btn-group-lg" @onclick=@Reload><b><font color="purple" size="3">Rescan</font> Folders on Server and re-get app data from Server</b></button>&nbsp;
            <ul>
                <li>Can rescan if the target folder is changed, without restarting server.</li>
            </ul>
        </li>
        <li>
            <button class="btn btn-group-lg" @onclick=@ClearZips><b><font color="red" size="3">Clear</font> created (and downloaded) Project Zip Files on Server.</b></button>&nbsp;
            <ul>
                <li>Zip files are created and saved on Server before Download.</li>
                <li><b><i>Nb:</i></b> ZipFolder is specified in <b>appsettings.json on server</b>.</li>
            </ul>
        </li>
        <li>
            <button class="btn btn-group-lg" @onclick=@ClearUploads><b><font color="red" size="3">Clear</font> Uploaded Files (Samples zips) on Server.</b></button>&nbsp;
            <ul>
                <li>A Samples folder, as zip file, is uploaded to here then extracted.</li>
            </ul>
        </li>
        <li>
            <button class="btn btn-group-lg" @onclick=@ClearSamples><b><font color="red" size="3">Clear</font> Samples folder on Server.</b></button>
            <ul>
                <li>Zip files on upload are extracted to here.</li>
            </ul>
        </li>
    </ul>
}

@code
{
    ProjectClasses.FolderTree RootFolder { get; set; } = null;

    List<ProjectClasses.FolderTree> Folders;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Folders = (await _SamplesClient.Get()).ToList();
        RootFolder = Folders.FirstOrDefault();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    async Task ClearZips()
    {
        RootFolder = null;
        var result = await _SamplesClient.Delete("downloads");
        RootFolder = new ProjectClasses.FolderTree();
    }
    async Task ClearUploads()
    {
        RootFolder = null;
        var result = await _SamplesClient.Delete("uploads");
        RootFolder = new ProjectClasses.FolderTree();
    }
    async Task ClearSamples()
    {
        RootFolder = null;
        var result = await _SamplesClient.Delete("samples");
        RootFolder = new ProjectClasses.FolderTree();
    }

    async Task Reload()
    {
        RootFolder = null;
        string param = $"Reload";
        var Filecontents = await _SamplesClient.GetTextorTextFile(param);
        var Folders = (await _SamplesClient.Get()).ToList();
        RootFolder = Folders.FirstOrDefault();;
    }

}
