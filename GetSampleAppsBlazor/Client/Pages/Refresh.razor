@page "/refresh"
@using Services
@inject HttpClient Http
@inject SamplesClient _SamplesClient
<h1>Refresh Sample Apps</h1>

@if (RootFolder == null)
{
    <p><em>ReLoading application data from Server to Client</em></p>
}
else
{
    <p><b><i>Have loaded the folders under the folder: </i><font color="blue">@RootFolder.FolderName</font></b></p>
    <ul>
    <li>
        <button class="btn btn-group-lg" @onclick=@Clear><b><font color="purple" size="3">Clear Zip Filess on Server</font></b></button>&nbsp;
        <ul>
            <li>Zip files are created and saved on Server before Download.</li>
            <li><b><i>Nb:</i></b> ZipFolder is specified in <b>appsettings.json on server</b>.</li>
        </ul>

    </li>
    <li>
        <button class="btn btn-group-lg" @onclick=@ReGet><b><font color="purple" size="3">Get folder data from Server</font></b></button>&nbsp;
        <ul>
            <li>Get folder and project data from server to client again.</li>
            <li><b><i>Nb:</i></b> A return to Home (Root) tab will also do this</li>
            <li>&nbsp;&nbsp;&nbsp;&nbsp;Going to Index tab does not load/relaod the data.</li>
        </ul>
    </li>
    <li>
        <button class="btn btn-group-lg" @onclick=@Reload><b><font color="purple" size="3">Rescan Folders on Server</font></b></button>&nbsp;
        <ul>
            <li>Can rescan if the target folder is changed, without restartinbg server.</li>
            <li>Need to follow with <i>Get folder data from Server</i> command.</li>
        </ul>
    </li>
    </ul>
}

@code
{
    ProjectClasses.FolderTree RootFolder { get; set; } = null;

    List<ProjectClasses.FolderTree> Folders;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Folders = (await _SamplesClient.Get()).ToList();
        RootFolder = Folders.FirstOrDefault();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    async Task Clear()
    {
        RootFolder = null;
        string param = $"1~1~Clear";
        var Filecontents = await _SamplesClient.GetFile(param);
        RootFolder = Folders.FirstOrDefault();
    }

    async Task Reload()
    {
        RootFolder = null;
        string param = $"1~1~Reload";
        var Filecontents = await _SamplesClient.GetFile(param);
        RootFolder = Folders.FirstOrDefault();
    }

    async Task ReGet()
    {
        RootFolder = null;
        var Folders = (await _SamplesClient.Get()).ToList();
        RootFolder = Folders.FirstOrDefault();
    }
}
