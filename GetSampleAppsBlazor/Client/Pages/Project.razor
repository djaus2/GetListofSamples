@page "/project/{FolderId}"
@inject HttpClient Http
@using Services
@using GetSampleApps.Client.Components
@inject SamplesClient _SamplesClient
@inject NavigationManager navigationManager
<h2>Project Folder</h2>
<table border="1">
    <tr>
        <td><b><i>Project/s:</i></b></td>
        <td>
            <button class="btn btn-primary" @onclick="@(e =>  GetFile(@Proj.ProjectFileName))"><b><i>@Proj.ProjectFileName</i></b></button>
        </td>
    </tr>
    <tr><td colspan="2">&nbsp;</td></tr>
    @foreach (var filename in Proj.ProjectCSFileNames)
    {
        @if (filename == Proj.ProjectCSFileNames[0])
        {
            <tr>
                <td><b><i>Source Files:</i></b></td>
                <td>
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td></td>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>

        }

    }
    @foreach (var filename in Proj.OtherCSFileNames)
    {
        @if (filename == Proj.OtherCSFileNames[0])
        {
            <tr>
                <td><b><i>Source Files:</i></b></td>
                <td>
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td></td>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>

        }
    }
    @foreach (var filename in Folder.SolutionNames)
    {
        @if (filename == Folder.SolutionNames[0])
        {
            <tr>
                <td><b><i>Solution Files:</i></b></td>
                <td>
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td></td>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="@(e =>  GetFile(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>

        }
    }
    @foreach (var filename in Folder.ReadMes)
    {
        @if (filename == Folder.ReadMes[0])
        {
            <tr>
                <td><b><i>ReadMe Files:</i></b></td>
                <td>
                    <button class="btn btn-primary" @onclick="@(e =>  GoToReadMe(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td></td>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="@(e =>  GoToReadMe(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>

        }
    }
    @foreach (var filename in Folder.Images)
    {
        @if (filename == Folder.Images[0])
        {
            <tr>
                <td><b><i>Image Files:</i></b></td>
                <td>
                    <button class="btn btn-primary" @onclick="@(e =>  GoToImage(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td></td>
                <td colspan="2">
                    <button class="btn btn-primary" @onclick="@(e =>  GoToImage(@filename))"><b><i>@filename</i></b></button>
                </td>
            </tr>

        }
    }



    <tr><td colspan="2">&nbsp;</td></tr>
    <tr>
        <td><b><i>@ZipFileName:</i></b></td>
        <td>
            <ZipComponent FolderId=@Folder.Id />
        </td>
    </tr>

</table>

<ClipBoardComponent Text="" FolderId=@FolderId Filename=@ShowFileName />

@code
{
    [Parameter]
    public string FolderId { get; set; }

    public string ShowFileName { get; set; }

    public string ZipFileName { get; set; } = "";

    ProjectClasses.FolderTree Folder;
    ProjectClasses.Project Proj;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        int folderId;
        if (int.TryParse(FolderId, out folderId)){ 
            Folder = SamplesClient.FolderDict[folderId];
            Proj = SamplesClient.ProjectDict[Folder.Projects.First()];
            string filename = Proj.ProjectFileName;
            GetFile(filename);
            ZipFileName = $"{Folder.FolderName}.zip";
        }
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            base.OnAfterRender(firstRender);
            StateHasChanged();
        }
    }

    void GetFile(string filename)
    {
        ShowFileName = filename;
        StateHasChanged();
    }

    void GoToReadMe(string filename)
    {
        string target = $"/showreadme/{Folder.Id}/{filename}";
        navigationManager.NavigateTo(target);
    }

    void GoToImage(string filename)
    {
        string target = $"/showimage/{Folder.Id}/{filename}";
        navigationManager.NavigateTo(target);
    }
}
