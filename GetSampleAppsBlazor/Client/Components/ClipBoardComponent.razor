<!-- ClipBoardComponent.razor -->
@inject IJSRuntime JSRuntime
@using Services
@inject SamplesClient _SamplesClient

<div class="form-inline">

    <br />
    <table style="background-color:beige" border="1" cellpadding="0" cellspacing="0">
        <tr style="border: 0px">
            <td style="border: 0px">
                <button type="button" class="btn btn-primary" @onclick="CopyTextToClipboard">Copy</button>
                &nbsp;
                @if (@UseFileName)
                {
                    <button type="button" class="btn btn-primary" @onclick="DownloadFile">Download</button><b><i>&nbsp;Filename:&nbsp;</i></b>@Filename
                }

            </td>
        </tr>
        <tr style="border: 0px">
            <td style="border: 0px">
                <pre>@TextToDisplay</pre>
            </td>
        </tr>
    </table>
</div>

@code {
        [Parameter]
        public string Text { get; set; }
        [Parameter]
        public string FolderId { get; set; }

    private string filename = "";
    [Parameter]
    public string Filename {
        get { return filename; }
        set {
            filename = value;
            if (rendered) {
                new Task(async () =>
                {
                    await GetFile();
                }).Start();
            }
        }
    }


    bool UseFileName = true;
    public string TextToDisplay { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task GetFile()
    {
        rendered = true;
        if (Filename == "")
        {
            UseFileName = false;
            TextToDisplay = Text;
        }

        else
        {
            UseFileName = true;

            int folderId;
            if (int.TryParse(FolderId, out folderId))
            {
                var Folder = SamplesClient.FolderDict[folderId];
                string DeviceNameProjectName = $"Text~{Filename}~{folderId}";
                Text = await _SamplesClient.GetTextorTextFile(DeviceNameProjectName);
                TextToDisplay = Text;
            }
        }
        StateHasChanged();
    }

    bool rendered = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetFile();
            rendered = true;
        }
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Text);
    }

    async Task DownloadFile()
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(Text);
        await FileUtil.SaveAsText(JSRuntime, Filename, bytes);
    }

    public static class FileUtil
    {
        public async static Task SaveAsText(IJSRuntime js, string filename, byte[] data)
        {
            await js.InvokeAsync<object>(
            "saveFile",
            filename,
            Convert.ToBase64String(data));
        }
    }

}
