@* @page "/BlazorComponent/{Title}" Uncomment if you want Component to be available via URL *@
@using Services
@using Components
@inject SamplesClient _SamplesClient
@inject IJSRuntime JSRuntime

<table>
    <tr>
        <td>
            <button class="btn btn-primary" @onclick="@(e => Resize(0))">
                <b>Min</b>
            </button>
        </td>
        <td>
            <button class="btn btn-primary" @onclick="@(e => Resize(1))">
                <b>&nbsp;&lt;&nbsp;</b>
            </button>
        </td>
        <td>
            <button class="btn btn-primary" @onclick="@(e => Resize(2))">
                <b>&nbsp;&gt;&nbsp;</b>
            </button>
        </td>
        <td>
            <button class="btn btn-primary" @onclick="@(e => Resize(3))">
                <b>Max</b>
            </button>
        </td>
        <td>
            <button class="btn btn-primary" @onclick="@(e => Resize(4))">
                <b>Image File Size</b>
            </button>
        </td>
        <td>Width: @Res</td>
    </tr>
</table>
<br />
@if (@Res == 0)
{
    <img src="@ImageInfo" />
}
else if (@Res < 200)
{
    <img src="@ImageInfo" style="width:100px;" />
}
else if (@Res < 300)
{
    <img src="@ImageInfo" style="width:200px;" />
}
else if (@Res < 600)
{
    <img src="@ImageInfo" style="width:400px;" />
}
else if (@Res < 800)
{
    <img src="@ImageInfo" style="width:600px;" />
}
else if (@Res < 1000)
{
    <img src="@ImageInfo" style="width:800px;" />
}
else if (@Res < 1200)
{
    <img src="@ImageInfo" style="width:1000px;" />
}
else if (@Res > 1000)
{
    <img src="@ImageInfo" style="width:1200px;" />
}
else
{
    <img src="@ImageInfo" />
}
<br />


@code {
    [Parameter]
    public string FolderId { get; set; }

    [Parameter]
    public string ImageFileName { get; set; }



    ProjectClasses.FolderTree Folder { get; set; }
    string ImageInfo { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {

    }


    //bool done = false;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        int folderId = int.Parse(FolderId);
        Folder = SamplesClient.FolderDict[folderId];
        string DeviceNameProjectName = $"{ImageFileName}~{FolderId}~Image";

        ImageInfo = await _SamplesClient.GetFile(DeviceNameProjectName);
        StateHasChanged();
    }

    List<int> Resolutions = new List<int> { 100, 200, 400, 600, 800, 1000, 1200 };
    int lastSize = -1;
    public int Res { get; set; } = 600;

    void Resize(int size)
    {
        switch (size)
        {
            case 0:
                Res = Resolutions.First();
                break;
            case 2:
                switch (Res)
                {
                    case 100:
                        Res = 200;
                        break;
                    case 200:
                        Res = 400;
                        break;
                    case 400:
                        Res = 600;
                        break;
                    case 600:
                        Res = 800;
                        break;
                    case 800:
                        Res = 1000;
                        break;
                    case 1000:
                        Res = 1200;
                        break;
                    case 1200:
                        break;
                    case 0:
                        if (Resolutions.Contains(lastSize))
                            Res = lastSize;
                        break;
                }
                break;
            case 1:
                switch (Res)
                {
                    case 100:
                        break;
                    case 200:
                        Res = 100;
                        break;
                    case 400:
                        Res = 200;
                        break;
                    case 600:
                        Res = 400;
                        break;
                    case 800:
                        Res = 600;
                        break;
                    case 1000:
                        Res = 800;
                        break;
                    case 1200:
                        Res = 1000;
                        break;
                    case 0:
                        if (Resolutions.Contains(lastSize))
                            Res = lastSize;
                        break;
                }
                break;
            case 3:
                Res = Resolutions.Last();
                break;
            case 4:
                if (Res == 0)
                {
                    if (Resolutions.Contains(lastSize))
                        Res = lastSize;
                }
                else
                {
                    lastSize = Res;
                    Res = 0;
                }
                break;
        }
        StateHasChanged();
    }
}



