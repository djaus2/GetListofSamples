@* @page "/BlazorComponent/{Title}" Uncomment if you want Component to be available via URL *@
@using Services
@using Components
@inject NavigationManager navigationManager
@if (@Visibility)
{
    @if (Folder == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
<tr>

    <td>@Folder.Children.Count</td>
    <td>@Folder.Projects.Count</td>
    <td>@Folder.Solutions.Count</td>
    <td>@Folder.ReadMes.Count</td>
    <td>@Folder.Images.Count</td>
    @for (int i = 0; i < Folder.Depth; i++)
    {
        <td></td>
    }
    @if (Folder.Depth == 0)
    {
        <td colspan="2"><button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><b><font color="blue" size="5">@Folder.FolderName</font></b></button></td>
    }
    else
    {
        @if (@Folder.HasChildren)
        {
            @if (Folder.Depth == 1)
            {
                <td colspan="2">
                    <button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><b><font color="darkgreen" size="4"> @Folder.FolderName</font></b></button>&nbsp;
                    @if (Folder.Solutions.Count != 0)
                    {
                        <ZipComponent FolderId=@Folder.Id />
                    }
                </td>
            }
            else if (Folder.Depth == 2)
            {
                <td colspan="2">
                    <button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><b><font color="purple" size="3">@Folder.FolderName</font></b></button>&nbsp;
                    @if (Folder.Solutions.Count != 0)
                    {
                        <ZipComponent FolderId=@Folder.Id />
                    }
                </td>
            }
            else
            {
                <td colspan="2">
                    <button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><b><font color="brown" size="2">@Folder.FolderName</font></b></button>&nbsp;
                    @if (Folder.Solutions.Count != 0)
                    {
                        <ZipComponent FolderId=@Folder.Id />
                    }
                </td>
            }
        }
    }
    <td></td>
</tr>
        @if (true)
        {
            @if (Folder.Depth > 0)
            {
                @if (Folder.Solutions.Count > 0)
                {
                    @foreach (string f1s in Folder.SolutionNames)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>
                            }
                            <td colspan="2"><font color="green"><a href="/sample/@Folder.Id/@f1s">@f1s</a></font></td>
                            <td></td>
                        </tr>
                    }
                }
                @if (Folder.Projects.Count > 0)
                {
                    @foreach (int f1p in Folder.Projects)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>
                            }
                            <td colspan="2"><a href="/sample/@Folder.Id/@SamplesClient.ProjectDict[f1p].ProjectFileName">@SamplesClient.ProjectDict[f1p].ProjectFileName</a></td>
                            <td></td>
                        </tr>
                        @foreach (string csFileName in SamplesClient.ProjectDict[f1p].ProjectCSFileNames)
                        {
                            <tr>
                                @for (int i = 0; i < Folder.Depth + 5; i++)
                                {
                                    <td></td>
                                }
                                <td colspan="2"><a href="/sample/@Folder.Id/@csFileName"><font color="brown">@csFileName</font></a></td>
                                <td></td>
                            </tr>
                        }
                    }

                }
                @if ((Folder.ReadMes.Count > 0))
                {
                    @foreach (string readme in Folder.ReadMes)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>

                            }
                            <td colspan="2"><a href="/showreadme/@Folder.Id/@readme"><font color="crimson">@readme</font></a></td>

                            <td></td>
                        </tr>
                    }
                }
                @if ((Folder.Images.Count > 0))
                {
                    @foreach (string image in Folder.Images)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>

                            }
                            <td><a href="/showimage/@Folder.Id/@image"><font color="blue">@image</font></a></td>

                            <td></td>
                        </tr>
                    }
                }
            }
        }


        @foreach (var f in Folder.Children)
        {
            <FolderComponent folder=f IsViz=@IsViz />
        }
    }
}

@code
{
    [Parameter]
    public int folder { get; set; }

    [Parameter]
    public bool IsViz { get { return Visibility; } set { Visibility = value; StateHasChanged(); } }
    bool Visibility = false;


    public ProjectClasses.FolderTree Folder { get; set; }
    public ProjectClasses.Project[] Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {


        await base.OnInitializedAsync();
        Folder = SamplesClient.FolderDict[folder];
        if (Folder.Depth < 1)
        {
            IsViz = true;
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

    }

    protected void SampleMe(MouseEventArgs e)
    {
        IsViz = !IsViz;
        if (!IsViz)
            //{
            // This needs futher work!
            //foreach (var fUpper in Folder.Parent.Children)
            //{
            //    var flrUpper = SamplesClient.FolderDict[fUpper];
            //    flrUpper.IsViz = false;
            //}
            //foreach (var fLower in Folder.Children)
            //{
            //    var flrLower = SamplesClient.FolderDict[fLower];
            //    flrLower.IsViz = false;
            //}
            //}
            StateHasChanged();
    }

    protected void GoToProject(int id)
    {
        string target = $"/Project/{id}";

        navigationManager.NavigateTo(target);
    }

    protected void GoToReadMe(int id)
    {
        string target = $"/Readme/{id}";

        navigationManager.NavigateTo(target);
    }


}