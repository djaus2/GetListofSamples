@* @page "/BlazorComponent/{Title}" Uncomment if you want Component to be available via URL *@
@using GetAnAzureIoTQuickstartApp.Client.Services
@using GetAnAzureIoTQuickstartApp.Client.Components
@inject NavigationManager navigationManager
@if (@Visibility)
{
    @if (Folder == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <tr>

            <td>@Folder.Children.Count</td>
            <td>@Folder.Projects.Count</td>
            <td>@Folder.Solutions.Count</td>
            <td>@Folder.ReadMes.Count</td>
            <td>@Folder.Images.Count</td>
            @for (int i = 0; i < Folder.Depth; i++)
            {
                <td></td>
            }
            @if (Folder.Depth == 0)
            {
                <td colspan="2"><button id=@Folder.FolderName class="btn btn-primary" @onclick=@SampleMe><h2>@Folder.FolderName</h2></button></td>
            }
            else
            {
                @if (@Folder.HasChildren)
                {
                    @if (Folder.Depth == 1)
                    {
                        <td colspan="2"><button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><h3>@Folder.FolderName</h3></button></td>
                    }
                    else
                    {
                        <td colspan="2"><button id=@Folder.FolderName class="btn btn-group-lg" @onclick=@SampleMe><b><font color="purple">@Folder.FolderName</font></b></button></td>
                    }
                }
                else
                {
                    <td colspan="2">
                        <button class="btn btn-primary" @onclick="@(e => GoToProject(Folder.Id))">
                            <b>@Folder.FolderName</b>
                        </button>
                    </td>
                }
            }
            <td></td>
        </tr>
        @if (true)
        {
            @if (Folder.Depth > 0)
            {
                @if (Folder.Projects.Count > 0)
                {
                    @foreach (int f1p in Folder.Projects)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 6; i++)
                            {
                                <td></td>
                            }
                            <td colspan="2"><a href="/samples/@f1p">@SamplesClient.ProjectDict[f1p].ProjectFileName</a></td>
                            <td></td>
                        </tr>
                        @foreach (string csFileName in SamplesClient.ProjectDict[f1p].ProjectCSFileNames)
                        {
                            <tr>
                                @for (int i = 0; i < Folder.Depth + 6; i++)
                                {
                                    <td></td>
                                }
                                <td colspan="2"><a href="/samples/@f1p"><font color="brown">@csFileName</font></a></td>
                                <td></td>
                            </tr>
                        }
                    }

                }
                @if (Folder.Solutions.Count > 0)
                {
                    @foreach (string f1s in Folder.SolutionNames)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>
                            }
                            <td colspan="2"><font color="green">@f1s</font>&nbsp;<ZipComponent FolderId=@Folder.Id /></td>
                            <td></td>
                        </tr>
                    }
                }
                @if ((Folder.ReadMes.Count > 0))
                {
                    @foreach (string readme in Folder.ReadMes)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>

                            }
                            <td colspan="2"><a href="/readme/@Folder.Id"><font color="crimson">@readme</font></a></td>

                            <td></td>
                        </tr>
                    }
                }
                @if ((Folder.Images.Count > 0))
                {
                    @foreach (string image in Folder.Images)
                    {
                        <tr>
                            @for (int i = 0; i < Folder.Depth + 5; i++)
                            {
                                <td></td>

                            }
                        <td><a href="/circuit/@Folder.Id/@image"><font color="blue">@image</font></a></td>

                            <td></td>
                        </tr>
                    }
                }
            }
        }


        @foreach (var f in Folder.Children)
        {
            <FolderComponent folder=f IsViz=@LowerIsViz />
        }
    }
}

@code
{
    [Parameter]
    public int folder { get; set; }

    [Parameter]
    public bool IsViz { get { return Visibility; } set { Visibility = value; } }

    public bool DetailIsViz { get; set; } = false;

    bool _Visibility = false;
    public bool Visibility { get { return _Visibility; } set { _Visibility = value; StateHasChanged(); } }

    public bool LowerIsViz { get; set; } = false;

    public ProjectClasses.FolderTree Folder { get; set; }
    public ProjectClasses.Project[] Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {


        await base.OnInitializedAsync();
        Folder = SamplesClient.FolderDict[folder];
        if (Folder.Depth < 2)
        {
            Visibility = true;
            StateHasChanged();
        }
        else
        {
            Visibility = IsViz;
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

    }

    protected void SampleMe(MouseEventArgs e)
    {
        LowerIsViz = !LowerIsViz;
        DetailIsViz = LowerIsViz;
        StateHasChanged();
    }

    protected void GoToProject(int id)
    {
        string target = $"/Project/{id}";

        navigationManager.NavigateTo(target);
    }

    protected void GoToReadMe(int id)
    {
        string target = $"/Readme/{id}";

        navigationManager.NavigateTo(target);
    }


}