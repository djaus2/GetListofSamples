@* @page "/BlazorComponent/{Title}" Uncomment if you want Component to be available via URL *@
@using GetAnAzureIoTQuickstartApp.Client.Services
@if (@Visibility)
{
    @if (Folder == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
<tr>

    <td>@Folder.Children.Count</td>
    <td>@Folder.Projects.Count</td>
    <td>@Folder.Solutions.Count</td>
    @for (int i = 0; i < Folder.Depth; i++)
    {
        <td></td>
    }
    @if (@Folder.HasChildren){
        <td colspan="2"><button id=@Folder.FolderName class="btn btn-secondary" @onclick=@SampleMe>@Folder.FolderName</button></td>
    } else{
        <td colspan="2"><b>@Folder.FolderName</b></td>
    }
    <td></td>
</tr>

        @if (Folder.Projects.Count > 0)
        {
            @foreach (int f1p in Folder.Projects)
            {
<tr>
    @for (int i = 0; i < Folder.Depth + 3; i++)
    {
        <td></td>
    }
    <td colspan="2"><a href="/samples/@f1p">@SamplesClient.ProjectDict[f1p].ProjectFileName</a></td>
    <td></td>
</tr>
            }
        }
        @if (Folder.Solutions.Count > 0)
        {
            @foreach (string f1s in Folder.SolutionNames)
            {
                <tr>
                    @for (int i = 0; i < Folder.Depth + 3; i++)
                    {
                        <td></td>
                    }
                    <td colspan="2"><font color="green">@f1s</font></td>
                    <td></td>
                </tr>
            }
        }

        @foreach (var f in Folder.Children)
        {
            <Component folder=f IsViz=@LowerIsViz />
        }
    }
}

@code
{
    [Parameter]
    public int folder { get; set; }

    [Parameter]
    public bool IsViz { get { return Visibility; } set { Visibility = value;} }

    bool _Visibility = false;
    public bool Visibility { get { return _Visibility; } set { _Visibility = value; StateHasChanged(); } }

    public bool LowerIsViz { get; set; } = false;

    public ProjectClasses.FolderTree Folder { get; set; }
    public ProjectClasses.Project[] Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Folder = SamplesClient.FolderDict[folder];
        if (Folder.Depth < 2)
        {
            Visibility = true;
            StateHasChanged();
        }
        else
        {
            Visibility = IsViz;
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

    }

    protected void SampleMe(MouseEventArgs e)
    {
        LowerIsViz = !LowerIsViz;
        StateHasChanged();
    }

}